# Red5 Pro properties

# Forcing a public IP address
#force.public.ip=yourpublic.ip.address.here

# Forcing a private IP address
#force.local.ip=local.private.ip.address.here

# Configure port availability checking
#check.port.availability=true

# Stream name illegal character filter regex, for publishers
stream.regex=[+.^:,/\\s]

# Configure the level of action to perform when the websocket is destroyed
# To close and clean-up the connection and streams when a ws is destroyed, set to true
# To allow idle checks to clean-up the connection, set to false
aggressive.connection.cleanup=false

# RTC stream adjustments.
# all values milliseconds.

# desired publisher rtc key frame interval, milliseconds. 
# to disable, change pli setting in rtc xml file. 
forced.keyframe.interval=3000

# maximum h264 video UDP rtp payload not including fixed headers.
# Keep under anticipated IP MTU. Affects H264 video.
jitter.mtu=1000

# floating point number! used to upgrade or maintain level during remb reports. 
abr.threshold=0.15

# 
# Publisher jitter buffer. 
# Maximum size in ms of packet re-ordering buffer. Can affect latency.
# Publisher mux will wait up to this limit to ensure A/V timestamps increment strictly.
# A lower value allows A/V packet timestamps to be out of order.
# Default: 500/20 = up to 25 audio packets can be queued up for muxing video in perfect timestamp-order.
# Poor networks benifit from lower value, 0-100 
jitter=500

# maximum subscriber audio/video  reordering que. 
rtc.audio.maxpkt=500

# available audio codecs (identified by enum name OPUS etc) NOT YET ENABLED
#rtc.audio.codecs=OPUS

# available video codecs (identified by enum name H264_PMODE1,H264_PMODE0,VP8 etc)
rtc.video.codecs=H264_PMODE1,VP8

# Debugging

# Used to indicate that flash data should be dumped to a file
flash.debug.dumpdata=false
# Used to indicate that rtc data should be dumped to a file
rtc.debug.dumpdata=false
# Used to indicate that performance data should be collected
perf.debug=false
# Interval in milliseconds to execute the perf collection
perf.interval.ms=100
# CPU cutoff value (per thread) to trigger a stack dump
perf.cpu.cutoff=70

# Encoder and decoder class(es) used for transcoding

# Opus
# output format is linear
opus.decoder.channels.out=1
# input format is linear
opus.encoder.channels.in=2
opus.encoder.channels.out=2

# AAC
#flash.aac.decoder=com.red5pro.jmfext.codec.audio.aac.JCodecAudioWrapper
flash.aac.decoder=com.red5pro.webrtc.codec.AACifCauldron

# aLaw
#flash.alaw.decoder=com.red5pro.webrtc.codec.AlawAudioDecoder

# mp3
flash.mp3.decoder=com.red5pro.webrtc.codec.MP3ifCauldron

# Speex
## Speex decoding options: JSpeexAudioDecoder - Xiph java and SpeexAudioDecoder - libSpeex
flash.speex.decoder=com.red5pro.webrtc.codec.JSpeexAudioDecoder

# uLaw
#flash.ulaw.decoder=com.red5pro.webrtc.codec.UlawAudioDecoder

# PCM
#flash.pcm.decoder=com.red5pro.webrtc.codec.PCMAudioDecoder

# Decoder class(es) used to decode video originating from flash sources

# AVC / h.264 
# H264PassThruVideoDecoder - Pass-thru decoder
# AVCifCauldron - Cauldron using lib_av
flash.h264.decoder=com.red5pro.webrtc.codec.AVCifCauldron

# h.263 / Sorensen
#flash.h263.decoder=

# VP6
#flash.vp6.decoder=

# helpers. x86 or x64 
native.arch=nar


# Jitsi properties

# ICE
#org.ice4j.ice.harvest.ALLOWED_INTERFACES=eth0
#org.ice4j.ice.harvest.BLOCKED_INTERFACES=
org.ice4j.ice.harvest.DISABLE_AWS_HARVESTER=true
org.ice4j.ice.harvest.FORCE_AWS_HARVESTER=false
stun.address=stun3.l.google.com:19302
ice.default.transport=udp

# LibJitsi media properties
## https://github.com/zbettenbuk/libjitsi/blob/master/doc/parameters.md

# MediaServiceImpl

# Indicates whether the detection of audio CaptureDevices is to be disabled. The default value is false i.e. the audio CaptureDevices are detected.
net.java.sip.communicator.service.media.DISABLE_AUDIO_SUPPORT=true
# Indicates whether the method DeviceConfiguration#setAudioSystem(AudioSystem, boolean) is to be considered disabled for the user i.e. the user is not presented with user interface which
# allows selecting a particular AudioSystem
net.java.sip.communicator.impl.neomedia.audiosystem.DISABLED=true
# Indicates whether the detection of video CaptureDevices is to be disabled. The default value is false i.e. the video CaptureDevices are detected.
net.java.sip.communicator.service.media.DISABLE_VIDEO_SUPPORT=true
# The prefix of the property names the values of which specify the dynamic payload type preferences.
#net.java.sip.communicator.impl.neomedia.dynamicPayloadTypePreferences

# ActiveSpeakerDetector

# Specifies the class name of the algorithm implementation for the detection/identification of the active/dominant speaker in a multipoint conference to be used by ActiveSpeakerDetectorImpl.
# The default value is null. If the specified value is null or the initialization of an instance of the specified class fails, ActiveSpeakerDetectorImpl falls back to a list of well-known
# algorithm implementations.
#org.jitsi.impl.neomedia.ActiveSpeakerDetectorImpl.implClassName=String

# JNIEncoder

# Specifies the H.264 (encoding) profile to be used in the absence of negotiation. Though it seems that RFC 3984 "RTP Payload Format for H.264 Video" specifies the baseline profile as the
# default, we have till the time of this writing defaulted to the main profile and we do not currently want to change from the main to the base profile unless we really have to.
#net.java.sip.communicator.impl.neomedia.codec.video.h264.defaultProfile=String
# Specifies whether Periodic Intra Refresh is to be used by default. The default value is true. The value may be overridden by #setAdditionalCodecSettings(Map).
org.jitsi.impl.neomedia.codec.video.h264.defaultIntraRefresh=true
# Specifies the maximum GOP (group of pictures) size i.e. the maximum interval between keyframes. FFmpeg calls it gop_size, x264 refers to it as keyint or i_keyint_max.
org.jitsi.impl.neomedia.codec.video.h264.keyint=160
# Specifies the x264 preset to be used by JNIEncoder. A preset is a collection of x264 options that will provide a certain encoding speed to compression ratio. A slower preset will provide 
# better compression i.e.
#org.jitsi.impl.neomedia.codec.video.h264.preset=String
h264.encode.preset=medium
h264.encode.profile=baseline

# OutputDataStreamImpl

# Indicates whether the RTP header extension(s) are to be removed from received RTP packets prior to relaying them. The default value is false.
org.jitsi.impl.neomedia.rtp.translator.RTPTranslatorImpl.removeRTPHeaderExtensions=false

# Dtls

# Specifies whether {@code DtlsControlImpl is to tear down the media session if the fingerprint does not match the hashed certificate. The default value is true.
org.jitsi.impl.neomedia.transform.dtls.DtlsControlImpl.verifyAndValidateCertificate=true

# Indicates whether unencrypted packets sent or received through DtlsPacketTransformer are to be dropped. The default value is false.
org.jitsi.impl.neomedia.transform.dtls.DtlsPacketTransformer.dropUnencryptedPkts=false

# Maximum time in milliseconds for a thread to wait for the srtp transformer to become available
dtls.ready.wait.interval=3000

# Cipher suites for encryption and decryption
# https://github.com/ssllabs/research/wiki/SSL-and-TLS-Deployment-Best-Practices
#dtls.ciphers=TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
dtls.ciphers=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_DSS_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA

# AES

# Specifies the name of the class to instantiate as a BlockCipherFactory implementation to be used by the class AES to initialize BlockCiphers.
#org.jitsi.impl.neomedia.transform.srtp.AES.factoryClassName=String

# FECReceiver

# Specifies the value of #FEC_BUFF_SIZE.
#org.jitsi.impl.neomedia.transform.fec.FECReceiver.FEC_BUFF_SIZE=int

# Specifies the value of #MEDIA_BUFF_SIZE.
#org.jitsi.impl.neomedia.transform.fec.FECReceiver.MEDIA_BUFF_SIZE=int

# KeyFrameRequester

# Specifies the preferred KeyFrameRequester to be used. (rtcp or signaling)
net.java.sip.communicator.impl.neomedia.codec.video.h264.preferredKeyFrameRequester=rtcp

# CachingTransformer
org.jitsi.impl.neomedia.transform.CachingTransformer.CACHE_SIZE_MILLIS=10000
org.jitsi.impl.neomedia.transform.CachingTransformer.CACHE_SIZE_PACKETS=3000
org.jitsi.impl.neomedia.transform.CachingTransformer.CACHE_SIZE_STREAMS=10
